@@ -29,6 +29,7 @@
 import { useTelescopeContext } from "../../context/TelescopeContext"
 import { StatsPanel } from "./panels/StatsPanel"
 import { LogPanel } from "./panels/LogPanel"
+import { ImagingPanel } from "./panels/ImagingPanel"
 import { AnnotationLayer } from "./AnnotationLayer"
 import type { ScreenAnnotation } from "../../types/telescope-types"
 
@@ -54,6 +55,10 @@
     handleTargetSelect,
     celestialObjects,
     currentTelescope,
+    showStreamStatus,
+    setShowStreamStatus,
+    setStreamStatus,
+    isImaging,
   } = useTelescopeContext()
 
   // Sample annotations for demonstration
@@ -329,7 +334,7 @@
     }
   }
   const [rotationAngle, setRotationAngle] = useState(0);
-  const [streamStatus, setStreamStatus] = useState<any>(null);
+  const [localStreamStatus, setLocalStreamStatus] = useState<any>(null);
   const [reconnectCounter, setReconnectCounter] = useState(0);
 
   // Simplified zoom and pan state
@@ -456,7 +461,7 @@
   // Setup event source for streaming status
   useEffect(() => {
     if (!currentTelescope) {
-      setStreamStatus(null);
+      setLocalStreamStatus(null);
       return;
     }
 
@@ -469,6 +474,7 @@
     eventSource.onmessage = (event) => {
       try {
         const data = JSON.parse(event.data);
+        setLocalStreamStatus(data);
         setStreamStatus(data);
         console.log("Received status update:", data);
       } catch (error) {
@@ -492,47 +498,6 @@
     };
   }, [reconnectCounter, currentTelescope]);
 
-  // Reset zoom and pan
-  // const resetZoomAndPan = () => {
-  //   setZoomLevel(1);
-  //   setPanPosition({ x: 0, y: 0 });
-  // };
-
-  // Handle mouse down for panning
-  // const handleMouseDown = (e: React.MouseEvent) => {
-  //   if (zoomLevel > 1) {
-  //     setIsDragging(true);
-  //     setDragStart({ x: e.clientX, y: e.clientY });
-  //   }
-  // };
-
-  // Handle mouse move for panning
-  // const handleMouseMove = (e: React.MouseEvent) => {
-  //   if (isDragging && zoomLevel > 1) {
-  //     const dx = e.clientX - dragStart.x;
-  //     const dy = e.clientY - dragStart.y;
-  //
-  //     // Adjust pan position based on drag distance
-  //     setPanPosition(prev => ({
-  //       x: prev.x + dx,
-  //       y: prev.y + dy
-  //     }));
-  //
-  //     // Update drag start position
-  //     setDragStart({ x: e.clientX, y: e.clientY });
-  //   }
-  // };
-
-  // Handle mouse up to end panning
-  // const handleMouseUp = () => {
-  //   setIsDragging(false);
-  // };
-
-  // Handle mouse leave to end panning
-  // const handleMouseLeave = () => {
-  //   setIsDragging(false);
-  // };
-
   // Zoom in function
   const zoomIn = () => {
     setZoomLevel(prev => Math.min(prev + 0.25, 4));
@@ -553,9 +518,9 @@
   };
 
   // Default values for frame counts if not available in stream
-  const stackedFrames = streamStatus?.status?.stacked_frame || 0;
-  const droppedFrames = streamStatus?.status?.dropped_frame || 0;
-  const targetName = selectedTarget?.name || streamStatus?.status?.target_name;
+  const stackedFrames = localStreamStatus?.status?.stacked_frame || 0;
+  const droppedFrames = localStreamStatus?.status?.dropped_frame || 0;
+  const targetName = selectedTarget?.name || localStreamStatus?.status?.target_name;
 
   return (
     <div className={`transition-all duration-300 ${isControlsCollapsed ? "col-span-full" : "lg:col-span-4"}`}>
@@ -570,24 +535,25 @@
                   {targetName}
                 </Badge>
               )}
-              {/*{streamStatus && streamStatus.status && (*/}
-              {/*  <Badge variant="outline" className="ml-2 bg-blue-600/20">*/}
-              {/*    Status: {streamStatus.status}*/}
-              {/*  </Badge>*/}
-              {/*)}*/}
+              {isImaging && (
+                <div className="ml-2 flex items-center gap-1">
+                  <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
+                  <span className="text-red-400 text-sm font-medium">REC</span>
+                </div>
+              )}
             </CardTitle>
             <div className="flex items-center gap-4">
               {/* System Status Indicators */}
               <div className="flex items-center gap-3 text-sm">
                 <div className="flex items-center gap-1">
-                  {streamStatus?.status?.charger_status === "Charging" ? (
-                    <BatteryCharging className={`w-4 h-4 ${streamStatus?.status?.battery_capacity > 20 ? "text-green-400" : "text-red-400"}`} />
-                  ) : streamStatus?.status?.charger_status === "Full" ? (
+                  {localStreamStatus?.status?.charger_status === "Charging" ? (
+                    <BatteryCharging className={`w-4 h-4 ${localStreamStatus?.status?.battery_capacity > 20 ? "text-green-400" : "text-red-400"}`} />
+                  ) : localStreamStatus?.status?.charger_status === "Full" ? (
                     <BatteryFull className="w-4 h-4 text-green-400" />
                   ) : (
-                    <Battery className={`w-4 h-4 ${streamStatus?.status?.battery_capacity > 20 ? "text-green-400" : "text-red-400"}`} />
+                    <Battery className={`w-4 h-4 ${localStreamStatus?.status?.battery_capacity > 20 ? "text-green-400" : "text-red-400"}`} />
                   )}
-                  <span className="text-gray-300">{Math.round(streamStatus?.status?.battery_capacity)}%</span>
+                  <span className="text-gray-300">{Math.round(localStreamStatus?.status?.battery_capacity)}%</span>
                 </div>
 
                 {/* Stacked Frames Counter */}
@@ -604,9 +570,9 @@
 
                 <div className="flex items-center gap-1">
                   <Thermometer
-                    className={`w-4 h-4 ${streamStatus?.status?.temp < 30 ? "text-blue-400" : "text-orange-400"}`}
+                    className={`w-4 h-4 ${localStreamStatus?.status?.temp < 30 ? "text-blue-400" : "text-orange-400"}`}
                   />
-                  <span className="text-gray-300">{streamStatus?.status?.temp?.toFixed(1)}°C</span>
+                  <span className="text-gray-300">{localStreamStatus?.status?.temp?.toFixed(1)}°C</span>
                 </div>
                 <div className="flex items-center gap-1">
                   <HardDrive
@@ -614,16 +580,18 @@
                   />
                   <span className="text-gray-300">{Math.round(systemStats.diskUsage)}%</span>
                 </div>
-                {/*{streamStatus && streamStatus.message && (*/}
-                {/*  <div className="flex items-center gap-1">*/}
-                {/*    <span className="text-gray-300">*/}
-                {/*      {streamStatus.message}*/}
-                {/*    </span>*/}
-                {/*  </div>*/}
-                {/*)}*/}
               </div>
 
               <div className="flex items-center gap-2">
+                <Button
+                  variant="ghost"
+                  size="sm"
+                  onClick={() => setShowStreamStatus(!showStreamStatus)}
+                  className="text-gray-400 hover:text-white"
+                  title={showStreamStatus ? "Hide Stream Status" : "Show Stream Status"}
+                >
+                  {showStreamStatus ? <Eye className="h-4 w-4" /> : <EyeOff className="h-4 w-4" />}
+                </Button>
                 <Button
                   variant="outline"
                   size="sm"
@@ -692,8 +660,6 @@
                   transform: `rotate(${rotationAngle}deg) scale(${zoomLevel}) translate(${panPosition.x}px, ${panPosition.y}px)`,
                   transformOrigin: 'center center',
                   userSelect: 'none',
-                  WebkitUserDrag: 'none',
-                  userDrag: 'none',
                   MozUserSelect: 'none',
                   pointerEvents: 'none',
                   objectFit: isPortrait ? 'contain' : 'cover',
@@ -706,22 +672,12 @@
               />
             </div>
 
-            {/* Rest of your UI components remain the same */}
-            {/* Annotation Layer with Fade Animation */}
-            {/*<AnnotationLayer*/}
-            {/*  showAnnotations={showAnnotations}*/}
-            {/*  annotationSettings={annotationSettings}*/}
-            {/*  handleAnnotationClick={handleAnnotationClick}*/}
-            {/*  setHoveredObject={(obj) => setHoveredAnnotation(obj ? obj.id : null)}*/}
-            {/*/>*/}
-            {/*<AnnotationLayer width={800} height={600} />*/}
-
             {/* Status Stream Overlay */}
-            {streamStatus && (
+            {localStreamStatus && showStreamStatus && (
               <div className="absolute bottom-4 right-4 bg-black/70 backdrop-blur-sm rounded-lg p-3 text-sm">
                 <h3 className="font-semibold mb-1 text-blue-400">Stream Status</h3>
                 <div className="text-xs text-gray-300">
-                  {Object.entries(streamStatus).map(([key, value]) => (
+                  {Object.entries(localStreamStatus).map(([key, value]) => (
                     <div key={key} className="flex justify-between gap-4">
                       <span className="font-medium">{key}:</span>
                       <span>{String(value)}</span>
@@ -781,11 +737,14 @@
               </Button>
             </div>
 
-            {/* Statistics Panel */}
-            {showStatsPanel && <StatsPanel />}
+            {/* Imaging Panel - shown when imaging is active */}
+            {isImaging && <ImagingPanel />}
+
+            {/* Statistics Panel - hidden when imaging */}
+            {showStatsPanel && !isImaging && <StatsPanel />}
 
-            {/* Observation Log Panel */}
-            {showLogPanel && <LogPanel />}
+            {/* Observation Log Panel - hidden when imaging */}
+            {showLogPanel && !isImaging && <LogPanel />}
           </div>
         </CardContent>
       </Card>
