# Multi-stage Next.js UI Dockerfile
# This version uses multi-stage builds to avoid permission issues

FROM node:20-alpine AS builder

# Install dependencies for Node.js builds
RUN apk add --no-cache \
    curl \
    git

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with legacy peer deps (as specified in CLAUDE.md)
RUN npm install --legacy-peer-deps

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies only
RUN apk add --no-cache \
    curl \
    git

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy installed dependencies from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy application source with proper ownership
COPY --chown=nextjs:nodejs . .

# Create necessary directories with proper permissions
RUN mkdir -p .next && \
    chown -R nextjs:nodejs .next && \
    chmod 755 .next

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Start the development server
CMD ["npm", "run", "dev"]